import * as fs from 'fs'
import * as grpc from '@grpc/grpc-js'

import { ScanClient } from './scan_grpc_pb'
import { scanRun } from './scanRun'
import { logger } from './logger'
import { AmaasScanResultObject } from './amaasScanResultObject'
import { AmaasCredentials } from './amaasCredentials'

/**
 * AmaasGrpcClient class
 */
export class AmaasGrpcClient {
  protected _scanClient
  protected _enableTLS
  protected _credsSecret
  protected _credsKey
  protected _hostName
  protected _credsType
  protected _timeout

  /**
   * AMaaS Scan Client instance
   * @param {string} amaasHostName AMaaS host name
   * @param {AmaasCredentials} creds credentials to use
   * @param {number} [timeout=180] number in seconds to wait before closing the connection
   * @param {boolean} [enableTLS=true] enabling TLS
   */
  constructor(
    amaasHostName: string,
    creds: AmaasCredentials,
    timeout: number | undefined = 180,
    enableTLS: boolean | undefined = true
  ) {
    this._hostName = amaasHostName
    this._enableTLS = enableTLS
    this._credsKey = 'Authorization'
    this._credsType = creds.credsType
    this._credsSecret = creds.secret
    this._timeout = timeout

    logger?.debug(
      `initialize AmaasGrpcClient, amaasHostName: ${amaasHostName}, creds: ${JSON.stringify(
        creds
      )}, enableTLS: ${enableTLS}`
    )

    try {
      if (enableTLS) {
        const channelCreds = grpc.credentials.createSsl()
        const metaCallback = (
          _params: any,
          callback: (arg0: null, arg1: any) => void
        ) => {
          const meta = new grpc.Metadata()
          meta.add(
            this._credsKey,
            creds.credsType === 'token'
              ? `bearer ${creds.secret}`
              : `apikey ${creds.secret}`
          )
          callback(null, meta)
        }
        const callCreds =
          grpc.credentials.createFromMetadataGenerator(metaCallback)
        const combCreds = grpc.credentials.combineChannelCredentials(
          channelCreds,
          callCreds
        )
        this._scanClient = new ScanClient(amaasHostName, combCreds)
      } else {
        this._scanClient = new ScanClient(
          amaasHostName,
          grpc.credentials.createInsecure()
        )
      }
    } catch (e) {
      logger?.error(e)
      throw new Error(`Failed to create scan client. ${e}`)
    }
  }

  /**
   * Scanning a file
   * @param {String} fileName file to scan
   */
  scanFile = async (fileName: string): Promise<AmaasScanResultObject> => {
    let stats: fs.Stats | undefined
    let fileSize = 0

    try {
      stats = fs.statSync(fileName)
      fileSize = stats.size
    } catch (e: any) {
      logger?.error(e)
      this.close()
      throw new Error(`Failed to open file. ${e}`)
    }

    return await scanRun(
      this._scanClient,
      fileName,
      fileSize,
      this._timeout
    ).then(
      result => result,
      e => {
        let error
        if (e.code) {
          if (['EACCES'].indexOf(e.code) !== -1) {
            error = `Failed to open file. ${e}`
          } else {
            switch (e.code) {
              case grpc.status.NOT_FOUND:
                error = `The requested resource was not found. ${e}`
                break
              case grpc.status.PERMISSION_DENIED:
                error = `You do not have sufficient permissions to access this resource. ${e}`
                break
              case grpc.status.UNAUTHENTICATED:
                error = `You are not authenticated. ${e}`
                break
              case grpc.status.DEADLINE_EXCEEDED:
                error = `The request deadline was exceeded. ${e}`
                break
              default:
                error = `An unknown error occurred. ${e}`
            }
          }
          error = new Error(error)
          logger?.error(error)
          this.close()
          throw error
        } else {
          logger?.error(e)
          this.close()
          throw e
        }
      }
    )
  }

  /**
   * Closing connection and scan client
   */
  close = (): void => {
    // Close channel
    this._scanClient.getChannel().close()

    // Close scan client
    this._scanClient.close()
  }
}
