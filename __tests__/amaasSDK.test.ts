import { readFileSync } from 'fs'
import { loadSync } from '@grpc/proto-loader'
import * as path from 'path'
import {
  Server,
  ServerCredentials,
  loadPackageDefinition
} from '@grpc/grpc-js'
import { randomUUID } from 'crypto'

import { AmaasGrpcClient, AmaasCredentials, AmaasScanResultObject, logger } from '../src'

const jestTimeout: number = 5 * 1000
jest.setTimeout(jestTimeout)

const grpcConnectionTimeout = 20 // in seconds
const amaasHostName = 'localhost:50051'
const creds: AmaasCredentials = {
  credsType: 'apikey',
  secret: ''
}
const enableTLS = false
const protoLoaderOptions = {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true
}
const scanProtoFile = path.resolve('./', 'scan.proto')
const packageDefinition = loadSync(
  scanProtoFile,
  protoLoaderOptions
)
const scanGrpcObj = loadPackageDefinition(packageDefinition)
const grpcClient = (scanGrpcObj.amaas as any).scan.v1.Scan
const grpcServiceAttrs = grpcClient.service
const serverInsecureCreds = ServerCredentials.createInsecure()

describe('AMaaS Node Client Tests', () => {
  // Services implementation
  const runImpl = (call: any): void => {
    // Random generated counts in between 2 and 5
    const totalCounts = Math.floor(Math.random() * 4 + 1)
    let counts = 0
    let rsSize = 0
    let fileName = ''
    const result = {
      cmd: 1,
      stage: 2,
      result: JSON.stringify({
        version: '1.0',
        scanResult: 0,
        scanId: randomUUID(),
        scanTimestamp: new Date().toUTCString(),
        foundMalwares: []
      })
    }
    call.on('data', (request: any) => {
      const stage: string = request.stage
      if (stage === 'STAGE_INIT') {
        rsSize = request.rs_size
        fileName = request.file_name
        // Service's behavior, returns quit command if rs_size is zero
        if (rsSize === 0) {
          call.write(result)
          call.end()
        } else {
          // Random generated length, value is in beteen 1 and rs_size
          const length = Math.ceil(Math.random() * rsSize)
          logger?.debug(`Server runImpl, stage: ${stage}, file_name: ${fileName}, rs_size: ${rsSize}, length: ${length}`)
          call.write({ cmd: 0, stage: 1, length })
        }
      } else if (stage === 'STAGE_RUN') {
        // Send quit command if maximum of counts is reached
        if (counts >= totalCounts) {
          call.write(result)
          call.end()
        } else {
          counts += 1
          const length = Math.ceil(Math.random() * rsSize)
          logger?.debug(
            `Server runImpl stage: ${stage}, file_name: ${fileName}, rs_size: ${rsSize}, length: ${length}`
          )
          call.write({ cmd: 0, stage: 1, length })
        }
      } else {
        // other stages
        call.end()
      }
    })
    call.on('end', () => {
      call.end()
    })
  }
  const scanImpls = {
    Run: runImpl
  }
  const server = new Server()

  beforeAll(done => {
    server.addService(grpcServiceAttrs, scanImpls)
    server.bindAsync(amaasHostName, serverInsecureCreds, (err, port) => {
      if (err != null) {
        done(err)
        return
      }
      server.start()
      logger?.info(`Server started on port ${port}`)
      done()
    })
  })

  afterAll(done => {
    server.tryShutdown(err => {
      if (err != null) {
        done(err)
        return
      }
      logger?.info('Server shutdown')
      done()
    })
  })

  let amaasGrpcClient: AmaasGrpcClient

  beforeEach((done) => {
    amaasGrpcClient = new AmaasGrpcClient(
      amaasHostName,
      creds,
      grpcConnectionTimeout,
      enableTLS
    )
    done()
  })

  afterEach((done) => {
    amaasGrpcClient.close()
    done()
  })

  it('Sequential file scan test', async () => {
    const filesToScan = ['package-lock.json', 'jest.config.ts', 'scan.proto']
    const results: AmaasScanResultObject[] = []
    const finialResult = await filesToScan.reduce(
      async (prev, current) => {
        await prev.then(result => {
          expect(result).toBeDefined()
          results?.push(result)
        })
        return await amaasGrpcClient.scanFile(current)
      },
      new Promise<AmaasScanResultObject>(resolve => {
        resolve(JSON.parse('{}'))
      })
    )
    expect(finialResult).toBeDefined()
    results.push(finialResult)
    results.forEach(result => {
      logger?.debug(`Sequential file scan result: ${JSON.stringify(result)}`)
    })
  })

  it('Concurrent file scan test', async () => {
    const filesToScan = ['package-lock.json', 'jest.config.ts', 'scan.proto']
    const actions = filesToScan.map(async file => {
      return await amaasGrpcClient.scanFile(file)
    })
    await Promise.all(actions)
      .then(results => {
        results.forEach(result => {
          expect(result).toBeDefined()
          logger?.debug(
            `Concurrent file scan result: ${JSON.stringify(result)}`
          )
        })
      })
      .catch(err => {
        throw err
      })
  })

  it('Sequential buffer scan test', async () => {
    const filesToScan = ['package-lock.json', 'jest.config.ts', 'scan.proto']
    const buffArray = filesToScan.map(file => {
      return readFileSync(file)
    })
    const results: AmaasScanResultObject[] = []
    const finialResult = await buffArray.reduce(
      async (prev, current) => {
        await prev.then(result => {
          expect(result).toBeDefined()
          if (result?.scanId !== '') {
            results.push(result)
          }
        })
        return await amaasGrpcClient.scanBuffer('xyz', current)
      },
      new Promise<AmaasScanResultObject>(resolve => {
        resolve(JSON.parse('{}'))
      })
    )
    expect(finialResult).toBeDefined()
    results.push(finialResult)
    results.forEach(result => {
      logger?.info(`Sequential buffer scan result: ${JSON.stringify(result)}`)
    })
  })

  it('Concurrent buffer scan test', async () => {
    const filesToScan = ['package-lock.json', 'jest.config.ts', 'scan.proto']
    const buffArray = filesToScan.map(file => {
      return readFileSync(file)
    })
    const actions = buffArray.map(async buff => {
      return await amaasGrpcClient.scanBuffer('xyz', buff)
    })
    await Promise.all(actions)
      .then(results => {
        results.forEach(result => {
          expect(result).toBeDefined()
          logger?.info(
            `Concurrent buffer scan result: ${JSON.stringify(result)}`
          )
        })
      })
      .catch(err => {
        throw err
      })
  })
})
