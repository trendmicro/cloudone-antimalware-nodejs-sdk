import * as protoLoader from '@grpc/proto-loader'
import * as path from 'path'
import { Server, ServerCredentials, loadPackageDefinition } from '@grpc/grpc-js'
import { randomUUID } from 'crypto'

import { AmaasGrpcClient, AmaasCredentials } from '../src'

jest.setTimeout(30 * 1000)

const grpcConnectionTimeout = 20 // in seconds
const amaasHostName = 'localhost:50051'
const creds: AmaasCredentials = {
  credsType: 'apikey',
  secret: 'faked_credentials',
}
const enableTLS = false
const protoLoaderOptions = {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
}
const scanProtoFile = path.resolve('./', 'scan.proto')
const packageDefinition = protoLoader.loadSync(
  scanProtoFile,
  protoLoaderOptions
)
const scanGrpcObj = loadPackageDefinition(packageDefinition)
const grpcClient = (scanGrpcObj.amaas as any).scan.v1.Scan
const grpcServiceAttrs = grpcClient.service
const serverInsecureCreds = ServerCredentials.createInsecure()

// Services implementation
const runImpl = (call: any) => {
  const totalCounts = Math.floor(Math.random() * (5 + 1))
  let counts = 0
  let rs_size = 0
  call.on('data', (request: any) => {
    const stage = request.stage
    if (stage === 'STAGE_INIT') {
      rs_size = request.rs_size
      const length = Math.floor(Math.random() * (request.rs_size + 1))
      call.write({ cmd: 0, length, stage: 1 })
    } else if (stage === 'STAGE_RUN') {
      if (counts >= totalCounts) {
        call.write({
          cmd: 1,
          stage: 2,
          result: JSON.stringify({
            version: '1.0',
            scanResult: 0,
            scanId: randomUUID(),
            scanTimestamp: new Date().toUTCString(),
            foundMalwares: [],
          }),
        })
        call.end()
      } else {
        counts += 1
        const length = Math.floor(Math.random() * (rs_size + 1))
        call.write({ cmd: 0, stage: 1, length })
      }
    } else {
      // other stages
      call.end()
    }
  })
  call.on('end', () => {
    call.end()
  })
}
const scanImpls = {
  Run: runImpl,
}

const server = new Server()

beforeAll(done => {
  server.addService(grpcServiceAttrs, scanImpls)
  server.bindAsync(amaasHostName, serverInsecureCreds, err => {
    if (err) {
      done(err)
      return
    }
    server.start()
    done()
  })
})

afterAll(done => {
  server.tryShutdown(err => {
    if (err) {
      done(err)
      return
    }
    done()
  })
})

describe('AMaaS Node Client Tests', () => {
  it('Single scan test', async () => {
    const amaasGrpcClient = new AmaasGrpcClient(
      amaasHostName,
      creds,
      grpcConnectionTimeout,
      enableTLS
    )
    expect(amaasGrpcClient).toBeDefined()
    await amaasGrpcClient
      .scanFile('package-lock.json')
      .then(result => {
        expect(result).toBeDefined()
      })
      .catch(err => {
        throw new Error(err)
      })
      .finally(() => {
        amaasGrpcClient.close()
      })
  })

  it('Sequential scan test', async () => {
    const amaasGrpcClient = new AmaasGrpcClient(
      amaasHostName,
      creds,
      grpcConnectionTimeout,
      enableTLS
    )
    expect(amaasGrpcClient).toBeDefined()
    await amaasGrpcClient
      .scanFile('package-lock.json')
      .then(result => {
        expect(result).toBeDefined()
      })
      .catch(err => {
        throw new Error(err)
      })
    await amaasGrpcClient
      .scanFile('package.json')
      .then(result => {
        expect(result).toBeDefined()
      })
      .catch(err => {
        throw new Error(err)
      })
    await amaasGrpcClient
      .scanFile('scan.proto')
      .then(result => {
        expect(result).toBeDefined()
      })
      .catch(err => {
        throw new Error(err)
      })
    amaasGrpcClient.close()
  })

  it('Concurrent scan test', async () => {
    const amaasGrpcClient = new AmaasGrpcClient(
      amaasHostName,
      creds,
      grpcConnectionTimeout,
      enableTLS
    )
    expect(amaasGrpcClient).toBeDefined()
    const filesToScan = ['package-lock.json', 'jest.config.ts']
    const actions = filesToScan.map(file => {
      return amaasGrpcClient.scanFile(file)
    })
    await Promise.all(actions)
      .then(results => {
        results.forEach(result => {
          expect(result).toBeDefined()
        })
      })
      .catch(err => {
        throw new Error(err)
      })
      .finally(() => {
        amaasGrpcClient.close()
      })
  })
})
