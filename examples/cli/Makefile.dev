IMAGE_NAME := ts-examples-cli-dev:latest


TM_AM_SERVER_ADDR ?=
TM_AM_AUTH_KEY ?=
TM_AM_LOG_LEVEL ?= debug
TM_AM_NODE_JS_PKG ?=
TM_AM_TYPES_PKG ?=
TM_AM_TS_FILE ?= fileScan

all: build

run:
	@docker run \
		--dns="8.8.8.8" \
		--interactive \
		--rm \
		--tty \
		--env TM_AM_SERVER_ADDR=${TM_AM_SERVER_ADDR} \
		--env TM_AM_AUTH_KEY=${TM_AM_AUTH_KEY} \
		--env TM_AM_LOG_LEVEL=${TM_AM_LOG_LEVEL} \
		--volume "`pwd`":/cli \
		--workdir /cli \
		--entrypoint bash \
		$(IMAGE_NAME)

prebuild:
	rm -rf dist node_modules
	rm -f package-lock.json
	cp ../../output/pkg/$(TM_AM_NODE_JS_PKG) ../../output/types/$(TM_AM_TYPES_PKG) .
	npm install $(TM_AM_NODE_JS_PKG)
	npm install -D $(TM_AM_TYPES_PKG)

build: prebuild
	docker build \
		-t $(IMAGE_NAME) \
		--build-arg TM_AM_NODE_JS_PKG=$(TM_AM_NODE_JS_PKG) \
		--build-arg TM_AM_TYPES_PKG=$(TM_AM_TYPES_PKG) \
		--build-arg TM_AM_TS_FILE=$(TM_AM_TS_FILE) \
		.
	mkdir -p dist
	docker run --rm $(IMAGE_NAME) tar -cz dist/index.js dist/node_modules | tar xzf - -C .
	rm -rf node_modules
	rm -f package-lock.json $(TM_AM_NODE_JS_PKG) $(TM_AM_TYPES_PKG)

clean:
	-@docker rmi $(IMAGE_NAME) || true

.PHONY: all prebuild run build clean
