"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmaasGrpcClient = void 0;
const fs = require("fs");
const grpc = require("@grpc/grpc-js");
const scan_grpc_pb_1 = require("./scan_grpc_pb");
const scanRun_1 = require("./scanRun");
const logger_1 = require("./logger");
/**
 * AmaasGrpcClient class
 */
class AmaasGrpcClient {
    /**
     * AMaaS Scan Client instance
     * @param {string} amaasHostName: AMaaS host name
     * @param {AmaasCredentails} creds: credentials to use
     * @param {boolean} enableTLS: enable/disable TLS, default is true
     */
    constructor(amaasHostName, creds, enableTLS = true) {
        this._enableTLS = true;
        this._credsSecret = '';
        this._credsKey = '';
        this._hostName = '';
        /**
         * scanFile - scan a file
         * @param {String} fileName: file to scan
         */
        this.scanFile = (fileName) => __awaiter(this, void 0, void 0, function* () {
            logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.debug('AmaasGrpcClient.scanFile() called');
            let stats;
            let fileSize = 0;
            try {
                stats = fs.statSync(fileName);
                fileSize = stats.size;
            }
            catch (err) {
                const errorMessage = `Failed to open '${fileName}': ${err}`;
                logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(errorMessage);
                throw errorMessage;
            }
            return yield (0, scanRun_1.scanRun)(this._scanClient, fileName, fileSize).then(result => result, err => {
                let _error;
                if (err.code) {
                    if (['EACCES'].indexOf(err.code) !== -1) {
                        _error = `Failed to open '${fileName}': ${err}`;
                    }
                    else if (err.code === 16) {
                        _error = `Authorization key '${this._credsType} ${this._credsSecret}' cannot be authenticated: ${err}`;
                    }
                    else if (err.code === 13) {
                        _error = `Protocol error TLS is ${this._enableTLS ? 'enabled' : 'disabled'}: ${err}`;
                    }
                    else {
                        _error = err;
                    }
                    logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(_error);
                    throw _error;
                }
                logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(err);
                throw err;
            });
        });
        /**
         * close - close the channel
         */
        this.close = () => {
            this._scanClient.close();
            logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.debug('AmaasGrpcClient.close() called, channel closed');
        };
        this._hostName = amaasHostName;
        this._enableTLS = enableTLS;
        this._credsKey = creds.key;
        this._credsType = creds.type;
        this._credsSecret = creds.secret;
        logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.debug(`initialize AmaasGrpcClient, amaasHostName: ${amaasHostName}, creds: ${JSON.stringify(creds)}, enableTLS: ${enableTLS}`);
        try {
            if (enableTLS) {
                const channelCreds = grpc.credentials.createSsl();
                const metaCallback = (_params, callback) => {
                    const meta = new grpc.Metadata();
                    meta.add(creds.key, creds.type ? `${creds.type} ${creds.secret}` : creds.secret);
                    callback(null, meta);
                };
                const callCreds = grpc.credentials.createFromMetadataGenerator(metaCallback);
                const combCreds = grpc.credentials.combineChannelCredentials(channelCreds, callCreds);
                this._scanClient = new scan_grpc_pb_1.ScanClient(amaasHostName, combCreds);
            }
            else {
                this._scanClient = new scan_grpc_pb_1.ScanClient(amaasHostName, grpc.credentials.createInsecure());
            }
        }
        catch (error) {
            const errorMessage = `Failed to create scan client: amaas host name is '${this._hostName}'`;
            logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(errorMessage);
            throw new Error(errorMessage);
        }
    }
}
exports.AmaasGrpcClient = AmaasGrpcClient;
