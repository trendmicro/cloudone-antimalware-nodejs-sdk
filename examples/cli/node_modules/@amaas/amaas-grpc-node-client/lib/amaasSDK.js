"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scanFile = exports.initAmaasSDK = void 0;
const fs = require("fs");
const grpc = require("@grpc/grpc-js");
const scan_grpc_pb_1 = require("./scan_grpc_pb");
const scanRun_1 = require("./scanRun");
const logger_1 = require("./logger");
/**
 * initAmaasSDK - initialize a new AMaaS Scan Client
 * @param {string} amaasHostName : AMaaS host name
 * @param {AmaasCredentails} creds : credentials to use
 * @param {boolean} enableTLS : enable/disable TLS
 */
function initAmaasSDK(amaasHostName, creds, enableTLS = true) {
    logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.debug(`initAmaasSDK() called, hostName: ${amaasHostName}, creds: ${JSON.stringify(creds)}, enableTLS: ${enableTLS}`);
    try {
        if (enableTLS) {
            const channelCreds = grpc.credentials.createSsl();
            const metaCallback = (_params, callback) => {
                const meta = new grpc.Metadata();
                meta.add(creds.key, creds.type ? `${creds.type} ${creds.secret}` : creds.secret);
                callback(null, meta);
            };
            const callCreds = grpc.credentials.createFromMetadataGenerator(metaCallback);
            const combCreds = grpc.credentials.combineChannelCredentials(channelCreds, callCreds);
            return new scan_grpc_pb_1.ScanClient(amaasHostName, combCreds);
        }
        else {
            return new scan_grpc_pb_1.ScanClient(amaasHostName, grpc.credentials.createInsecure());
        }
    }
    catch (err) {
        const errorMessage = `Failed to create scan client: amaas host name is '${amaasHostName}'`;
        logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(errorMessage);
        throw new Error(errorMessage);
    }
}
exports.initAmaasSDK = initAmaasSDK;
/**
 * scanFile - scan a file
 * @param {string} fileName : the file to scan
 * @param {ScanClient} scanClient : the AMaaS Scan Client
 */
const scanFile = (fileName, scanClient, creds, enableTLS = true) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.debug('scanFile() called');
    let stats;
    let fileSize = 0;
    try {
        stats = fs.statSync(fileName);
        fileSize = stats.size;
    }
    catch (err) {
        const errorMessage = `Failed to open '${fileName}': ${err}`;
        logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(errorMessage);
        throw errorMessage;
    }
    return yield (0, scanRun_1.scanRun)(scanClient, fileName, fileSize).then(result => result, err => {
        if (err.code) {
            let _error;
            if (['EACCES'].indexOf(err.code) !== -1) {
                _error = `Failed to open '${fileName}': ${err}`;
            }
            else if (err.code === 16) {
                _error = `Authorization key '${creds.type} ${creds.secret}' cannot be authenticated: ${err}`;
            }
            else if (err.code === 13) {
                _error = `Protocol error TLS is ${enableTLS ? 'enabled' : 'disabled'}: ${err}`;
            }
            else {
                _error = err;
            }
            logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(_error);
            throw _error;
        }
        logger_1.logger === null || logger_1.logger === void 0 ? void 0 : logger_1.logger.error(err);
        throw err;
    });
});
exports.scanFile = scanFile;
