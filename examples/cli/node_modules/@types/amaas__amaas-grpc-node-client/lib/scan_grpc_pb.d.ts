// package: amaas.scan.v1
// file: scan.proto

/* tslint:disable */
/* eslint-disable */

import * as grpc from "@grpc/grpc-js";
import * as scan_pb from "./scan_pb";

interface IScanService extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
    run: IScanService_IRun;
}

interface IScanService_IRun extends grpc.MethodDefinition<scan_pb.C2S, scan_pb.S2C> {
    path: "/amaas.scan.v1.Scan/Run";
    requestStream: true;
    responseStream: true;
    requestSerialize: grpc.serialize<scan_pb.C2S>;
    requestDeserialize: grpc.deserialize<scan_pb.C2S>;
    responseSerialize: grpc.serialize<scan_pb.S2C>;
    responseDeserialize: grpc.deserialize<scan_pb.S2C>;
}

export const ScanService: IScanService;

export interface IScanServer extends grpc.UntypedServiceImplementation {
    run: grpc.handleBidiStreamingCall<scan_pb.C2S, scan_pb.S2C>;
}

export interface IScanClient {
    run(): grpc.ClientDuplexStream<scan_pb.C2S, scan_pb.S2C>;
    run(options: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<scan_pb.C2S, scan_pb.S2C>;
    run(metadata: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<scan_pb.C2S, scan_pb.S2C>;
}

export class ScanClient extends grpc.Client implements IScanClient {
    constructor(address: string, credentials: grpc.ChannelCredentials, options?: Partial<grpc.ClientOptions>);
    public run(options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<scan_pb.C2S, scan_pb.S2C>;
    public run(metadata?: grpc.Metadata, options?: Partial<grpc.CallOptions>): grpc.ClientDuplexStream<scan_pb.C2S, scan_pb.S2C>;
}
