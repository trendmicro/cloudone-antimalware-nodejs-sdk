// package: amaas.scan.v1
// file: scan.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";

export class C2S extends jspb.Message { 
    getStage(): Stage;
    setStage(value: Stage): C2S;
    getFileName(): string;
    setFileName(value: string): C2S;
    getRsSize(): number;
    setRsSize(value: number): C2S;
    getOffset(): number;
    setOffset(value: number): C2S;
    getChunk(): Uint8Array | string;
    getChunk_asU8(): Uint8Array;
    getChunk_asB64(): string;
    setChunk(value: Uint8Array | string): C2S;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): C2S.AsObject;
    static toObject(includeInstance: boolean, msg: C2S): C2S.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: C2S, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): C2S;
    static deserializeBinaryFromReader(message: C2S, reader: jspb.BinaryReader): C2S;
}

export namespace C2S {
    export type AsObject = {
        stage: Stage,
        fileName: string,
        rsSize: number,
        offset: number,
        chunk: Uint8Array | string,
    }
}

export class S2C extends jspb.Message { 
    getStage(): Stage;
    setStage(value: Stage): S2C;
    getCmd(): Command;
    setCmd(value: Command): S2C;
    getOffset(): number;
    setOffset(value: number): S2C;
    getLength(): number;
    setLength(value: number): S2C;
    getResult(): string;
    setResult(value: string): S2C;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): S2C.AsObject;
    static toObject(includeInstance: boolean, msg: S2C): S2C.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: S2C, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): S2C;
    static deserializeBinaryFromReader(message: S2C, reader: jspb.BinaryReader): S2C;
}

export namespace S2C {
    export type AsObject = {
        stage: Stage,
        cmd: Command,
        offset: number,
        length: number,
        result: string,
    }
}

export enum Stage {
    STAGE_INIT = 0,
    STAGE_RUN = 1,
    STAGE_FINI = 2,
}

export enum Command {
    CMD_RETR = 0,
    CMD_QUIT = 1,
}
